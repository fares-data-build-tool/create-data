version: 2.1

parameters:
  # This parameter is used to trigger the main workflow
  trigger:
    type: boolean
    default: true

  # A parameter per package
  fdbt-netex-output:
    type: boolean
    default: false
  fdbt-reference-data-service:
    type: boolean
    default: false
  fdbt-site:
    type: boolean
    default: false

executors:
  node:
    docker:
      - image: circleci/node

jobs:
  trigger-workflows:
    executor: node
    steps:
      - checkout
      - run:
          name: Trigger workflows
          command: chmod +x .circleci/circle_trigger.sh && .circleci/circle_trigger.sh

#  fdbt-netex-output
  checkout-repo:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/project
          paths:
            - '*'

  build-netex-output-resources:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Starting build"
            npm ci
            npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - './repos/<< parameters.package_name >>/node_modules'

  audit-netex-output-resources:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            npx audit-ci --moderate

  test-netex-output-resources:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Running tests"
            npm run test:ci

  lint-netex-output-resources:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Linting site"
            npm run lint

  deploy-netex-output-resources-to-test:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            sudo npm i -g serverless@2.35.0
            export SLS_DEBUG="*" && sls deploy --stage=test
            echo "Finished deploy"

  deploy-netex-output-resources-to-preprod:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            sudo npm i -g serverless@2.35.0
            export SLS_DEBUG="*" && sls deploy --stage=preprod
            echo "Finished deploy"

  deploy-netex-output-resources-to-prod:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/node:12
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            sudo npm i -g serverless@2.35.0
            export SLS_DEBUG="*" && sls deploy --stage=prod
            echo "Finished deploy"

  audit-netex-validator:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/python:3.8
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt-get install -y nodejs
            pip install safety
            cd src/netex-validator
            npx audit-ci --moderate
            safety check -r requirements.txt

  deploy-netex-validator-to-test:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/python:3.8
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm i -g serverless@2.35.0
            cd src/netex-validator
            npm ci
            export SLS_DEBUG="*" && sls deploy --stage=test
            echo "Finished deploy"

  deploy-netex-validator-to-preprod:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/python:3.8
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm i -g serverless@2.35.0
            cd src/netex-validator
            npm ci
            export SLS_DEBUG="*" && sls deploy --stage=preprod
            echo "Finished deploy"

  deploy-netex-validator-to-prod:
    parameters:
      package_name:
        type: string
    docker:
      - image: circleci/python:3.8
    working_directory: ~/project/repos/<< parameters.package_name >>
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          command: |
            echo "Deploying..."
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm i -g serverless@2.35.0
            cd src/netex-validator
            npm ci
            export SLS_DEBUG="*" && sls deploy --stage=prod
            echo "Finished deploy"

workflows:
  version: 2

  # The main workflow responsible for triggering all other workflows
  # in which changes are detected.
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - trigger-workflows


  # Workflows defined for each package.

  fdbt-netex-output:
    when: << pipeline.parameters.fdbt-netex-output >>
    jobs:
      - checkout-repo:
          filters:
            tags:
              only: /^v.*/

      - audit-netex-output-resources:
          package_name: fdbt-netex-output
          requires:
            - checkout-repo
          filters:
            tags:
              only: /^v.*/

      - audit-netex-validator:
          package_name: fdbt-netex-output
          requires:
            - checkout-repo
          filters:
            tags:
              only: /^v.*/

      - deploy-netex-validator-to-test:
          package_name: fdbt-netex-output
          requires:
            - audit-netex-validator
          context: tfn-fdbt-test
          filters:
            branches:
              only:
                - develop

      - deploy-netex-validator-to-preprod:
          package_name: fdbt-netex-output
          requires:
            - audit-netex-validator
          context: tfn-fdbt-preprod
          filters:
            branches:
              only:
                - master

      - hold-netex-validator-prod-deployment:
          package_name: fdbt-netex-output
          type: approval
          requires:
            - audit-netex-validator
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-netex-validator-to-prod:
          package_name: fdbt-netex-output
          requires:
            - hold-netex-validator-prod-deployment
          context: tfn-fdbt-prod
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-netex-output-resources:
          package_name: fdbt-netex-output
          requires:
            - audit-netex-output-resources
          filters:
            tags:
              only: /^v.*/

      - test-netex-output-resources:
          package_name: fdbt-netex-output
          requires:
            - build-netex-output-resources
          filters:
            tags:
              only: /^v.*/

      - lint-netex-output-resources:
          package_name: fdbt-netex-output
          requires:
            - build-netex-output-resources
          filters:
            tags:
              only: /^v.*/

      - deploy-netex-output-resources-to-test:
          package_name: fdbt-netex-output
          requires:
            - test-netex-output-resources
            - lint-netex-output-resources
          context: tfn-fdbt-test
          filters:
            branches:
              only:
                - develop

      - deploy-netex-output-resources-to-preprod:
          package_name: fdbt-netex-output
          requires:
            - test-netex-output-resources
            - lint-netex-output-resources
          context: tfn-fdbt-preprod
          filters:
            branches:
              only: master

      - hold-prod-deployment:
          package_name: fdbt-netex-output
          type: approval
          requires:
            - test-netex-output-resources
            - lint-netex-output-resources
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-netex-output-resources-to-prod:
          package_name: fdbt-netex-output
          requires:
            - hold-prod-deployment
          context: tfn-fdbt-prod
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

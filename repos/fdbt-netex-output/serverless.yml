service: netex-output-service

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage, 'test'}
  stackName: ${self:service}-${self:provider.stage}
  timeout: 30
  memorySize: 512
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "ssm:GetParameter"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
          Resource:
            - !Sub arn:aws:s3:::fdbt-matching-data-${self:provider.stage}/*
            - !Sub arn:aws:s3:::fdbt-unvalidated-netex-data-${self:provider.stage}/*
            - !Sub arn:aws:s3:::fdbt-netex-data-${self:provider.stage}/*
        - Effect: "Allow"
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "sns:Publish"
          Resource:
            - Fn::ImportValue: ${self:provider.stage}:SlackAlertsTopicArn

  s3:
    matchingDataBucket:
      name: fdbt-matching-data-${self:provider.stage}
      publicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      bucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      lifecycleConfiguration:
        Rules:
          - Id: ExpiryRule
            Status: Enabled
            ExpirationInDays: "90"
      corsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - POST
            AllowedOrigins:
              - "http://localhost:3000"
              - "https://*.dft-cfd.com"

    netexDataBucket:
      name: fdbt-netex-data-${self:provider.stage}
      publicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      bucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      lifecycleConfiguration:
        Rules:
          - Id: ExpiryRule
            Status: Enabled
            ExpirationInDays: "90"
      corsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - "http://localhost:3000"
              - "https://*.dft-cfd.com"

functions:
  NetexConvertor:
    handler: src/netex-convertor/handler.netexConvertorHandler
    events:
      - s3:
          bucket: matchingDataBucket
          event: s3:ObjectCreated:*
    reservedConcurrency: 30
    vpc:
      securityGroupIds:
        - Fn::ImportValue: ${self:provider.stage}:ReferenceDataUploaderLambdaSG
      subnetIds:
        - Fn::ImportValue: ${self:provider.stage}:PrivateSubnetA
        - Fn::ImportValue: ${self:provider.stage}:PrivateSubnetB
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      UNVALIDATED_NETEX_BUCKET: fdbt-unvalidated-netex-data-${self:provider.stage}
      RDS_HOST:
        Fn::ImportValue: ${self:provider.stage}:RdsClusterInternalEndpoint
      SNS_ALERTS_ARN: ${self:custom.sns.alertsTopic.value}

  NetexEmailer:
    handler: src/netex-emailer/handler.netexEmailerHandler
    events:
      - s3:
          bucket: netexDataBucket
          event: s3:ObjectCreated:*
    environment:
      MATCHING_DATA_BUCKET: fdbt-matching-data-${self:provider.stage}
      SERVICE_EMAIL_ADDRESS: bodshelpdesk@kpmg.co.uk
      EMAIL_SENDING_ENABLED: "false"

resources:
  Resources:
    NetexConvertorLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-NetexConvertor
        RetentionInDays: 180
    NetexCompleteSingleFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete for type single"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-single-${self:provider.stage}"
    NetexCompleteReturnFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete for type return"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-return-${self:provider.stage}"
    NetexCompletePeriodFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete for type period"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-period-${self:provider.stage}"
    NetexCompleteFlatFareFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete for type flatFare"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-flatfare-${self:provider.stage}"
    NetexCompleteMultiOperatorFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete for type multiOperator"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-multiOperator-${self:provider.stage}"
    NetexCompleteTotalFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexConvertorLogGroup
        FilterPattern: "NeTEx generation complete"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Output"
            MetricName: "netex-complete-total-${self:provider.stage}"
    NetexEmailerLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-NetexEmailer
        RetentionInDays: 180
    SESEmailsSentFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName:
          Ref: NetexEmailerLogGroup
        FilterPattern: "Email sent"
        MetricTransformations:
          - MetricValue: "1"
            MetricNamespace: "FDBT/Netex-Emailer"
            MetricName: "SES-emails-sent-${self:provider.stage}"

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-log-retention

package:
  include:
    - ./src/netex-convertor/point-to-point-tickets/pointToPointTicketNetexTemplate.xml
    - ./src/netex-convertor/period-tickets/periodTicketNetexTemplate.xml

custom:
  sns:
    alertsTopic:
      value: ${self:custom.sns.alertsTopic.${self:provider.stage}, self:custom.sns.alertsTopic.other}
      dev: arn:aws:sns:us-east-1:000000000000:AlertsTopic
      other:
        Fn::ImportValue: ${self:provider.stage}:SlackAlertsTopicArn
  logRetentionInDays: 180

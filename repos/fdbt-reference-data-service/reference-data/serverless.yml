service: reference-data-service

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage, 'test'}
  timeout: 900
  memorySize: 2048
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:ListBucket'
      Resource: 
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.stage}-fdbt-test-naptan-data
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.stage}-fdbt-test-naptan-data
            - "/*"         
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.stage}-fdbt-test-tnds-data
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.stage}-fdbt-test-tnds-data
            - "/*"     
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt naptanTable.Arn
        - !GetAtt tndsTable.Arn
        - !GetAtt servicesTable.Arn

  environment:
    NAPTAN_TABLE_NAME: !Ref naptanTable
    TNDS_TABLE_NAME: !Ref tndsTable
    SERVICES_TABLE_NAME: !Ref servicesTable
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      
plugins:
  - serverless-plugin-typescript
  - serverless-s3-local
  - serverless-dynamodb-local
  - serverless-offline


functions:
  naptanUploader:
    handler: naptan-uploader/handler.s3hook
    events: 
      - s3: ${self:provider.stage}-fdbt-test-naptan-data
        event: s3:ObjectCreated:*

  nocUploader:
    handler: noc-uploader/handler.s3hook
    events: 
      - s3: ${self:provider.stage}-fdbt-test-noc-data
        event: s3:ObjectCreated:*

  nptgUploader:
    handler: nptg-uploader/handler.s3hook
    events: 
      - s3: ${self:provider.stage}-fdbt-test-nptg-data
        event: s3:ObjectCreated:*

  tndsUploader:
    handler: tnds-uploader/handler.s3hook
    events: 
      - s3: ${self:provider.stage}-fdbt-test-tnds-data
        event: s3:ObjectCreated:*


resources: 
  Resources:
    naptanTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-Stops
        AttributeDefinitions:
          - AttributeName: "ATCOCode"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "ATCOCode"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    nocTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-Operators
        AttributeDefinitions:
          - AttributeName: "NOCCode"
            AttributeType: "S"
          # - AttributeName: "PubNmId"
          #   AttributeType: "N"
        KeySchema:
          - AttributeName: "NOCCode"
            KeyType: "HASH"
        # GlobalSecondaryIndexes:
        #   - IndexName: "PubNmId"
        #     KeySchema: 
        #       - AttributeName: "PubNmId"
        #         KeyType: "HASH"
        #     Projection:
        #       ProjectionType: "KEYS_ONLY"
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST
    
    servicesTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-Services
        AttributeDefinitions:
          - AttributeName: "NationalOperatorCode"
            AttributeType: "S"
          - AttributeName: "LineName"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "NationalOperatorCode"
            KeyType: "HASH"
          - AttributeName: "LineName"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    tndsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-TNDS
        AttributeDefinitions:
          - AttributeName: "FileName"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "FileName"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST


# The below custom section is for local testing of dynamodb using serverless-dynamodb-local.
# custom:
#   dynamodb:
#     stages:
#       - test
#     start:
#       port: 9100
#       inMemory: true
#       heapInitial: 200m
#       heapMax: 1g
#       migrate: true
#       seed: true
    
#     seed:
#       domain:
#         sources:
#           - table: Stops
#             sources: [./.dynamodb/dummy_naptan_data.json]
#           # - table: Operators
#           #   sources: [./.dynamodb/dummy_noc_data.json]
#           # - table: Services
#           #   sources: [./.dynamodb/seededTestData/dummy_services_data.json]
#           - table: TNDS
#             sources: [./.dynamodb/dummy_tnds_data.json]

#       convertEmptyValues: true
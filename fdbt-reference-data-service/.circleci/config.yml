version: 2.1
jobs: 
  netex-convertor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/project

    steps:
      - checkout

      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless
            cd netex-convertor
            npm install

      - run:
          name: Build the code
          command: |
            cd netex-convertor
            npm run build

      - run:
          name: Run tests
          command: |
            cd netex-convertor
            npm run test

      - run:
          name: Deploy application to tfn-test on aws
          command: |
            echo "starting deploy"
            cd netex-convertor
            export NODE_ENV='test' && export SLS_DEBUG="*" && serverless deploy
            echo "Finished deploy"

  odh-uploader:
    docker:
      - image: circleci/node:latest
    working_directory: ~/project

    steps:
      - checkout

      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless
            cd odh-uploader
            npm install

      - run:
          name: Build the code
          command: |
            cd odh-uploader
            npm run build

      - run:
          name: Run tests
          command: |
            cd odh-uploader
            npm run test

      - run:
          name: Deploy application to tfn-test on aws
          command: |
            echo "Finished config, starting deploy"
            cd odh-uploader
            export SLS_DEBUG="*" && sls deploy
            echo "Finished deploy"

  ref-data-uploader:
    docker:
      - image: circleci/node:latest
    working_directory: ~/project

    steps:
      - checkout

      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless
            cd ref-data-uploader
            npm install

      - run:
          name: Build the code
          command: |
            cd ref-data-uploader
            npm run build

      - run:
          name: Run tests
          command: |
            cd ref-data-uploader
            npm run test

      - run:
          name: Deploy application to tfn-test on aws
          command: |
            echo "Finished config, starting deploy"
            cd ref-data-uploader
            export SLS_DEBUG="*" && sls deploy
            echo "Finished deploy"
              
  site:
    docker:
      - image: circleci/node:latest
    working_directory: ~/project

    steps:
      - checkout

      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless
            cd site
            npm install

      - run:
          name: Build the code
          command: |
            cd site
            npm run build

      - run:
          name: Run tests
          command: |
            cd site
            npm run test

      - run:
          name: Deploy application to tfn-test on aws
          command: |
            echo "Finished config, starting deploy"
            cd site
            serverless config credentials --provider aws --key "${AWS_ACCESS_KEY_ID}" --secret "${AWS_SECRET_ACCESS_KEY}" --profile "circle-ci"
            export NODE_ENV='test' && export SLS_DEBUG="*" && sls deploy --aws-profile "circle-ci"
            echo "Finished deploy"

  # This isnt working as it needs an SSH key generating to be able to push the git tags. The 'Creating a Bitbucket User Key' part of
  # https://circleci.com/docs/2.0/gh-bb-integration/ is what I think we have to do.

  # git-tag:
  #   docker:
  #     - image: circleci/node:latest
  #   working_directory: ~/project

  #   steps:
  #     - checkout

      # - run:
      #     name: Tag the build
      #     command: |
      #       #get highest tag number
      #       VERSION=`git describe --abbrev=0 --tags`

      #       #replace . with space so can split into an array
      #       VERSION_BITS=(${VERSION//./ })

      #       #get number parts and increase last one by 1
      #       VNUM1=${VERSION_BITS[0]}
      #       VNUM2=${VERSION_BITS[1]}
      #       VNUM3=${VERSION_BITS[2]}
      #       VNUM3=$((VNUM3+1))

      #       #create new tag
      #       NEW_TAG="$VNUM1.$VNUM2.$VNUM3"

      #       echo "Updating $VERSION to $NEW_TAG"

      #       #creating new tag and pushing
      #       git tag $NEW_TAG
      #       echo "Tagged with $NEW_TAG"
      #       git push --tags

workflows:
  version: 2
  build-and-test-deliverable-one-lambdas:
    jobs:
      - netex-convertor:
          context: "tfn-aws"
          filters:
            branches:
              only: feature/cleanup
      - odh-uploader:
          filters:
            branches:
              only: develop
      - ref-data-uploader:
          filters:
            branches:
              only: develop
      - site:
          filters:
            branches:
              only: develop
      # - git-tag:
      #   requires:
      #     - netex-convertor
      #     - odh-uploader
      #     - ref-data-uploader
      #     - site
      
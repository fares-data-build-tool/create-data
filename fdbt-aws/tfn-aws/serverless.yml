# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tfn-aws
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    User:
      Type: 'AWS::IAM::User'
      Properties:
        Groups: tfn-group
        UserName: tfn
    Group:
      Type: 'AWS::IAM::Group'
      Properties:
        GroupName: tfn-group
        Policies: tfn-policy
    Users:
      Type: 'AWS::IAM::UserToGroupAddition'
      Properties:
        GroupName: tfn-group
        Users:
          - tfn
    Policies:
      Type: 'AWS::IAM::Policy'
      Properties:
        Groups: 
          - tfn-group
        PolicyName: tfn-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: apigateway:*
              Resource": arn:aws:apigateway:*::/*
            - Effect: Allow
              Action":
                -  's3:*''
'                - 'logs:*'
                -  'cloudformation:*'
                -  'acm:ListTagsForCertificate'
                -  'iam:*'
                -  'cloudfront:*'
                -  'acm:DescribeCertificate'
                -  'acm:GetCertificate'
                -  'cloudwatch:*'
                -  'waf:*'
                -  'route53:*'
                -  'lambda:*'
                -  'acm:ListCertificates'
                -  'waf-regional:*'
              Resource: '*'      
    Keys:
      Type: 'AWS::IAM::AccessKey'
      Properties:
        UserName: tfn
  Outputs:
    AccessKey:
      Value: !Ref Keys
      Description: AWSAccessKeyId of new user
    SecretKey:
      Value: !GetAtt 
        - Keys
        - SecretAccessKey
      Description: AWSSecretKey of new user
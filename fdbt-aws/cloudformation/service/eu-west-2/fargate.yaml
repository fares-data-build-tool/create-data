AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for ECS resources"

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - test
      - preprod
      - prod
  ProductName:
    Type: String
    Default: fdbt
  ImageUrl:
    Type: String
    Description: The url of the docker image in ECR
  ContainerPort:
    Type: Number
    Default: 80
    Description: Port on which the process is running in the container
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProductName}-${Stage}-log-group

  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public access to the load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ContainerSG
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProductName}-${Stage}-cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ProductName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsTaskExecutionRoleArn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsTaskRoleArn
      ContainerDefinitions:
        - Name: !Ref ProductName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ProductName}-${Stage}-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProductName
          Environment:
            - Name: STAGE
              Value: !Ref Stage
            - Name: AWS_NODEJS_CONNECTION_REUSE_ENABLED
              Value: "1"

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ProductName
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSG
          Subnets:
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetA
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetB
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ProductName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetA
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetB
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ProductName}-${Stage}-target-group
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub ${Stage}:CertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

Outputs:
  LoadbalancerArn:
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Sub ${Stage}:LoadbalancerArn

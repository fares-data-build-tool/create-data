AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for ECS resources

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - test
      - preprod
      - prod
  ProductName:
    Type: String
    Default: fdbt
  SiteImageUrl:
    Type: String
    Description: The url of the site docker image in ECR
  SiteContainerPort:
    Type: Number
    Default: 80
    Description: Port on which the site process is running in the container
  SiteContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the site container. 1024 is 1 CPU
  SiteContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in MiB to give the site container
  SiteDesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the site service task to run
  SiteMinCount:
    Type: Number
    Default: 1
    Description: Min number of tasks the site can scale to
  SiteMaxCount:
    Type: Number
    Default: 6
    Description: Max number of tasks the site can scale to
  SiteCpuTarget:
    Type: Number
    Default: 50
    Description: CPU usage percentage to track for auto scaling
  MonitoringImage:
    Type: String
    Description: The monitoring docker image
    Default: grafana/grafana:7.0.1
  MonitoringContainerPort:
    Type: Number
    Default: 3000
    Description: Port on which the monitoring process is running in the container
  MonitoringContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the monitoring container. 1024 is 1 CPU
  MonitoringContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in MiB to give the monitoring container
  MonitoringDesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the monitoring service task to run
  MonitoringDomain:
    Type: String
    Description: Domain for monitoring
  SessionSecret:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.
    Description: The session secret, between 8 to 41 alphanumeric characters.
    MaxLength: "41"
    MinLength: "8"
    NoEcho: "true"
    Type: String
  ExternalCertificateArn:
    Type: String
    Default: ""
    Description: ARN for ACM certificate for external domain

Conditions:
  IsTest: !Equals [!Ref Stage, "test"]
  IsProd: !Equals [!Ref Stage, "prod"]
  IsNotProd: !Not [!Equals [!Ref Stage, "prod"]]

Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProductName}-fargate-cluster-${Stage}

  SiteTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProductName}-site-${Stage}
      Cpu: !Ref SiteContainerCpu
      Memory: !Ref SiteContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsTaskExecutionRoleArn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsSiteTaskRoleArn
      ContainerDefinitions:
        - Name: !Sub ${ProductName}-site-${Stage}
          Cpu: !Ref SiteContainerCpu
          Memory: !Ref SiteContainerMemory
          Image: !Ref SiteImageUrl
          PortMappings:
            - ContainerPort: !Ref SiteContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SiteLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProductName
          Environment:
            - Name: STAGE
              Value: !Ref Stage
            - Name: AWS_NODEJS_CONNECTION_REUSE_ENABLED
              Value: "1"
            - Name: RDS_HOST
              Value:
                Fn::ImportValue: !Sub ${Stage}:RdsHostName
            - Name: FDBT_USER_POOL_CLIENT_ID
              Value:
                Fn::ImportValue: !Sub ${Stage}:UserPoolClientID
            - Name: FDBT_USER_POOL_ID
              Value:
                Fn::ImportValue: !Sub ${Stage}:UserPoolID
            - Name: ALLOW_DISABLE_AUTH
              Value: !If [IsTest, "1", "0"]
            - Name: SESSION_SECRET
              Value: !Ref SessionSecret
            - Name: ENABLE_VIRUS_SCAN
              Value: "1"

  MonitoringTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProductName}-monitoring-${Stage}
      ContainerDefinitions:
        - Name: !Sub ${ProductName}-monitoring-${Stage}
          Cpu: !Ref MonitoringContainerCpu
          Memory: !Ref MonitoringContainerMemory
          Image: !Ref MonitoringImage
          PortMappings:
            - ContainerPort: !Ref MonitoringContainerPort
          MountPoints:
            - SourceVolume: efs
              ContainerPath: /var/lib/grafana
          User: root
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MonitoringLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProductName
          Environment:
            - Name: GF_SERVER_ROOT_URL
              Value: !Sub https://${MonitoringDomain}
      Cpu: !Ref MonitoringContainerCpu
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsTaskExecutionRoleArn
      Memory: !Ref MonitoringContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: !Sub ${Stage}:EcsMonitoringTaskRoleArn
      Volumes:
        - Name: efs
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSMonitoringFileSystem

  SiteService:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Sub ${ProductName}-site-${Stage}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: "1.4.0"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref SiteDesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${Stage}:FargateSiteContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetA
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetB
      TaskDefinition: !Ref SiteTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${ProductName}-site-${Stage}
          ContainerPort: !Ref SiteContainerPort
          TargetGroupArn: !Ref SiteTargetGroup

  SiteAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref SiteMinCount
      MaxCapacity: !Ref SiteMaxCount
      ResourceId:
        !Join ["/", [service, !Ref ECSCluster, !GetAtt SiteService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue: !Sub ${Stage}:EcsSiteScalingRoleArn
      ScheduledActions:
        Fn::If:
          - IsNotProd
          - - Schedule: "cron(0 18 * * ? *)"
              ScheduledActionName: SiteScaleIn
              ScalableTargetAction:
                MaxCapacity: 0
                MinCapacity: 0
            - Schedule: "cron(0 7 * * ? *)"
              ScheduledActionName: SiteScaleOut
              ScalableTargetAction:
                MaxCapacity: !Ref SiteMaxCount
                MinCapacity: !Ref SiteMinCount
          - !Ref AWS::NoValue

  MonitoringAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 1
      ResourceId:
        !Join ["/", [service, !Ref ECSCluster, !GetAtt MonitoringService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue: !Sub ${Stage}:EcsSiteScalingRoleArn
      ScheduledActions:
        Fn::If:
          - IsNotProd
          - - Schedule: "cron(0 19 * * ? *)"
              ScheduledActionName: MonitoringScaleIn
              ScalableTargetAction:
                MaxCapacity: 0
                MinCapacity: 0
            - Schedule: "cron(0 7 * * ? *)"
              ScheduledActionName: MonitoringScaleOut
              ScalableTargetAction:
                MaxCapacity: 1
                MinCapacity: 1
          - !Ref AWS::NoValue

  SiteAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: site-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SiteAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: !Ref SiteCpuTarget

  MonitoringService:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Sub ${ProductName}-monitoring-${Stage}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: "1.4.0"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref MonitoringDesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${Stage}:FargateMonitoringContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetA
            - Fn::ImportValue: !Sub ${Stage}:PrivateSubnetB
      TaskDefinition: !Ref MonitoringTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${ProductName}-monitoring-${Stage}
          ContainerPort: !Ref MonitoringContainerPort
          TargetGroupArn: !Ref MonitoringTargetGroup

  # ALB Resources

  SiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ProductName}-site-tg-${Stage}
      Port: !Ref SiteContainerPort
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  MonitoringTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PublicLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ProductName}-monitoring-tg-${Stage}
      Port: !Ref MonitoringContainerPort
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${Stage}:VpcId

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetA
        - Fn::ImportValue: !Sub ${Stage}:PublicSubnetB
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Stage}:LoadBalancerSecurityGroup

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Fn::ImportValue: !Sub ${Stage}:CertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref SiteTargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  ListenerExternalCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Condition: IsProd
    Properties:
      Certificates:
        - CertificateArn: !Ref ExternalCertificateArn
      ListenerArn: !Ref PublicLoadBalancerListener

  MonitoringListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref MonitoringTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref MonitoringDomain
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  ALBRedirectHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  # EFS Resources

  EFSMonitoringFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub ${ProductName}-monitoring-fs-${Stage}

  EFSMonitoringMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSMonitoringFileSystem
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Stage}:EFSMonitoringMountTargetSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub ${Stage}:PrivateSubnetA

  EFSMonitoringMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSMonitoringFileSystem
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Stage}:EFSMonitoringMountTargetSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub ${Stage}:PrivateSubnetB

  # CloudWatch Resources

  SiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProductName}-site-${Stage}

  MonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProductName}-monitoring-${Stage}

  2xxResponsesLogGroupMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: "{$.res.statusCode=2*}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "2xxResponses"

  3xxResponsesLogGroupMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: "{$.res.statusCode=3*}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "3xxResponses"

  4xxResponsesLogGroupMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: "{$.res.statusCode=4*}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "4xxResponses"

  5xxResponsesLogGroupMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: "{$.res.statusCode=5*}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "5xxResponses"

  ResponsesTimeLogMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: "{$.responseTime=*}"
      MetricTransformations:
        - MetricValue: "$.responseTime"
          MetricNamespace: "FDBT/Site"
          MetricName: "responseTime"

  TransactionStartLogMetrics:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: '{$.message="*transaction start"}'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "startedTransactions"

  TransactionSuccessLogMetrics:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref SiteLogGroup
      FilterPattern: '{$.message="*transaction complete"}'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "FDBT/Site"
          MetricName: "completeTransactions"
  # Custom Resources

Outputs:
  LoadbalancerArn:
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Sub ${Stage}:LoadbalancerArn

  LoadBalancerDomainName:
    Value: !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Sub ${Stage}:LoadbalancerDomainName

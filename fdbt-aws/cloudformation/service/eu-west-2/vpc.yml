AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for VPC resources"

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - test
      - preprod
      - prod
  ProductName:
    Type: String
    Default: fdbt

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicA:
      CIDR: "10.0.0.0/24"
    PublicB:
      CIDR: "10.0.1.0/24"
    PrivateA:
      CIDR: "10.0.2.0/24"
    PrivateB:
      CIDR: "10.0.3.0/24"
    DataA:
      CIDR: "10.0.4.0/24"
    DataB:
      CIDR: "10.0.5.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-vpc-${Stage}

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicA", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-publicSubnetA-${Stage}

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicB", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-publicSubnetB-${Stage}

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateA", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-privateSubnetA-${Stage}

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateB", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-privateSubnetB-${Stage}

  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "DataA", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-dataSubnetA-${Stage}

  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "DataB", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-dataSubnetB-${Stage}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-internetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-publicRouteTable-${Stage}

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-natGateway-${Stage}

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-privateRouteTable-${Stage}

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  DataRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${ProductName}-dataRouteTable-${Stage}

  DataRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataRouteTable
      SubnetId: !Ref DataSubnetA

  DataRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DataRouteTable
      SubnetId: !Ref DataSubnetB

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref "PrivateRouteTable"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref "VPC"

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "*"
            Principal: "*"
            Resource: "*"
      RouteTableIds:
        - !Ref "PrivateRouteTable"
        - !Ref "DataRouteTable"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref "VPC"

Outputs:
  VpcId:
    Value: !Ref "VPC"
    Export:
      Name: !Sub ${Stage}:VpcId
  PublicSubnetA:
    Value: !Ref "PublicSubnetA"
    Export:
      Name: !Sub ${Stage}:PublicSubnetA
  PublicSubnetB:
    Value: !Ref "PublicSubnetB"
    Export:
      Name: !Sub ${Stage}:PublicSubnetB
  PrivateSubnetA:
    Value: !Ref "PrivateSubnetA"
    Export:
      Name: !Sub ${Stage}:PrivateSubnetA
  PrivateSubnetB:
    Value: !Ref "PrivateSubnetB"
    Export:
      Name: !Sub ${Stage}:PrivateSubnetB
  DataSubnetA:
    Value: !Ref "DataSubnetA"
    Export:
      Name: !Sub ${Stage}:DataSubnetA
  DataSubnetB:
    Value: !Ref "DataSubnetB"
    Export:
      Name: !Sub ${Stage}:DataSubnetB

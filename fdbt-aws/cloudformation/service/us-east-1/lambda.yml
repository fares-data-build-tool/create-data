AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for Lambda resources

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - test
      - preprod
      - prod

Resources:
  SecurityHeadersEdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

  SecurityHeadersEdgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub security-headers-edge-lambda-${Stage}
      Role: !GetAtt SecurityHeadersEdgeLambdaRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Timeout: 5
      Code:
        ZipFile: |
          'use strict';
          exports.handler = (event, context, callback) => {
              const response = event.Records[0].cf.response;
              const headers = response.headers;

              headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=31536000; includeSubDomains; preload'}];

              if (!headers['content-security-policy']) {
                headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}];
              }

              headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
              headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
              headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
              headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];
              
              callback(null, response);
          };

  SecurityHeadersEdgeLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SecurityHeadersEdgeLambda

Outputs:
  SecurityHeadersEdgeLambdaVersion:
    Value: !Ref SecurityHeadersEdgeLambdaVersion
